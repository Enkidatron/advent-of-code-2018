module Day02 exposing (doTheNextThing, findEditDistanceOne, findPart2Answer, hasNthings, inputLines, inputText, inputsWithThreeRepeatsCount, inputsWithTwoRepeatsCount, part1Answer, part2Answer)

import Dict
import EditDistance
import Exts.Dict


inputText =
    "ohvflkatysoimjxbunazgwcdpr\nohoflkctysmiqjxbufezgwcdpr\nohvflkatysciqwxfunezgwcdpr\nfhvflyatysmiqjxbunazgwcdpr\nohvhlkatysmiqjxbunhzgwcdxr\nohvflbatykmiqjxbunezgscdpr\nohvflkatasaiqjxbbnezgwcdpr\nohvflkatyymiqjxrunetgwcdpr\nohvflkatbsmiqhxbunezgwcdpw\noheflkytysmiqjxbuntzgwcdpr\nohvflkatrsmiqjibunezgwcupr\nohvflkaiysmiqjxbunkzgwkdpr\nohvilkutysmiqjxbuoezgwcdpr\nphvflkatysmkqjxbulezgwcdpr\nohvflkatnsmiqjxbznezgpcdpr\nohvylkatysriqjobunezgwcdpr\nohvflkatytmiqjxbunezrwcypr\nohvonkatysmiqjxbunezgwxdpr\nohvflkatgsmoqjxyunezgwcdpr\nohvflkbtqsmicjxbunezgwcdpr\nohvflkatysmgqjqbunezgwcdvr\nohvtlkatyrmiqjxbunezgwcdpi\nohvflkatyskovjxbunezgwcdpr\nohvflkayysmipjxbunezgwcdpu\nohvalkltysmiqjxbunezgecdpr\nohvflkatysmiqjxiunezgnndpr\nohvflkatyomiqjxbbnezgwcdpp\nohvflkatysmiqjxbuoezgncdpy\nomvflkvtysmiqjxwunezgwcdpr\nohvflkatynmicjxbunezgwpdpr\nohvflkatyqmaqjxbunezvwcdpr\nohbfhkatysmiqjxbunezgwcdqr\nohvflkatesmiqjvbunezpwcdpr\nohvflkatysmsqjxiunezgwcdhr\nohvfjkatysmwqjxbunezgwcddr\nohvflkanysmiqjxbunwkgwcdpr\nohqflkatysmiqjxbuuezgwcddr\nohvflkatysmvqjxbznlzgwcdpr\nohvflkatysmiqjxbunjzwwqdpr\nohvfjkatysmiqxxbunezgwcupr\nchvfxkatysmiqjxxunezgwcdpr\nuhvflkatitmiqjxbunezgwcdpr\nohvflbatysmiqjxbuntzgwcdor\nohvflkmtysmmqjxbunexgwcdpr\nohvflsatysmyqjxjunezgwcdpr\nohvfskatysmiqjjbunezgwcdpg\nohvflkatysniqjxbunexgwcrpr\nohvfekatysmiqjxbunedswcdpr\nohvfltatysmjqjxbunezghcdpr\nohvflkatydmiqjxvunezggcdpr\noavflkatysmiqjxtunazgwcdpr\nohvflkltysmiqjxbuzeugwcdpr\nohbflkatysmiqjybuuezgwcdpr\nehvfzkatysmiqjxbuhezgwcdpr\nodvflkatssmiqjxbunezgwcdpj\nohvflkatysmiqjzbufezgwbdpr\njhvflkdtysmiqqxbunezgwcdpr\nohvflkatysmiqjwbunengwcnpr\nohvfskatysmiqjxbxuezgwcdpr\nohvflkatysmiqjobvnezgwcrpr\nohvrlkatysmiqjxbwnezgrcdpr\nofvflkatysmiqjxbunezpwcdwr\nohvfxdatyomiqjxbunezgwcdpr\nyhvflkatydmiqjxbubezgwcdpr\nohvflkatysdiqjxbuneztwcspr\nohvflkatydmiquxbunezgwcbpr\nohvflkatysmiqcxbukezgwcdwr\nohvflkntasmiqjxbunezghcdpr\nlhvflkatysmiqjxbunezqwckpr\nehifikatysmiqjxbunezgwcdpr\nohvflkatysmiqjcbutezgwcdpm\nohvflkatjssiqrxbunezgwcdpr\noyvflkavysmiqjxlunezgwcdpr\norvflkgtysmiqjxbukezgwcdpr\nihvflkatysmiqaxbunpzgwcdpr\nohvflkatusmiqjxbbnezgwchpr\nohvflkatysbiqjxvuneugwcdpr\nohvflkatysmiqjcbungzgwcwpr\novvflkatysmidjxbunezgscdpr\nohvflqatysmiljxbunfzgwcdpr\nghvfokatysmiqjxbunqzgwcdpr\nnxvflkatysmxqjxbunezgwcdpr\nohvflkatysmiqjxbexezgwrdpr\nohvfrkatysmhqjxbuntzgwcdpr\nohvflkvtysmiqjxocnezgwcdpr\nohvglkgtysmiqjxnunezgwcdpr\nohvflkatysmnqjxbunecgwqdpr\noyvflkatysgiqjxbcnezgwcdpr\nofvflkatysmiqjxbunfzgwcdpg\notvflkttysmiqjxbunezgwmdpr\nohvflkvtysmiqjbbunezgzcdpr\nahvflkatysyiqjxbunezvwcdpr\nohiflkatysmydjxbunezgwcdpr\nohvfwkatysmvqjxbunezwwcdpr\nohvflkatysbiqjxbunergwodpr\nhhvsdkatysmiqjxbunezgwcdpr\nihvflkwtysmiqjxbunezgacdpr\nohvfljatysmiqcxbunuzgwcdpr\nohvflkatysqiqlwbunezgwcdpr\nohvflkauysmkqjxwunezgwcdpr\nohvflkatysmoqjqbunezgwodpr\nohvslkvtysmipjxbunezgwcdpr\nolvflkatysmiujxbunezgwctpr\nosvflxatysmiqjxbenezgwcdpr\norvflkhtysmiqjxbinezgwcdpr\nohcflkatystiqjxbunezbwcdpr\nohcflkatyfmifjxbunezgwcdpr\nohvflkatdsmiqjxbrnezgwcdpt\nohvflkatysmiqjxbwnqzawcdpr\noevflkakysmiqjxbunezgwcdpt\nofvflkatysmiqjxbunbqgwcdpr\nohvflkatysmdqjxbunefqwcdpr\nohvklkalysmiqjxbunezgwcepr\nocvflhatysmiqjxbunezzwcdpr\nuhvflkatysmiqmxbunezgwcxpr\nohvflkatyshikjhbunezgwcdpr\nlbvflkatysmoqjxbunezgwcdpr\nohvflkatssmuqjxbunezgscdpr\nohvflkatysmifyxbuvezgwcdpr\nohvfikatysmiqjxbunezgwfupr\nohvmlkaiysmiqjxqunezgwcdpr\nohvflkatysmiqjxiunpzgwcdpo\nlhvflkatysmpqjxbenezgwcdpr\nohvflkatysmiqjobunengwczpr\nohoflkatysniqjxbunezgccdpr\nohvfxkatysmiqjgbunyzgwcdpr\nohvflkytysmiljxbubezgwcdpr\nhhvsdkatysmiqjxjunezgwcdpr\nohvflkatysmiqjtuunezgwcdpt\nohvfdkxtysmiqjubunezgwcdpr\nohxflkatysmiyjxbunezgwcdhr\nohvflkatysmiqjibunezgwcppd\nohvflkatysmihjxbunezgwcdhj\nohvflkatysmiqjxronezgwcdvr\nofrflxatysmiqjxbunezgwcdpr\nohvwlkatysmiqjxounezgscdpr\nohvflkatcodiqjxbunezgwcdpr\noqvflkatysmiqjxbunebgwmdpr\nohvflmatysmisjxbunezqwcdpr\novvflkatysmiqjxbuxezgwcdpe\nohvflkatysmdejxbuneztwcdpr\nhhvflkathsmiqjxbwnezgwcdpr\nohkflkatlsmsqjxbunezgwcdpr\nohvflkktysmizjxhunezgwcdpr\nohzflkatysmiqjrbunezgwcdpj\nohuflwatysmiqjxbunezgwcdgr\nohvflkatysmiqvxmunpzgwcdpr\nxhvflkwtysmiqjxbunezgwjdpr\nwhvflkatysmiqjxbunezgzcopr\nohvflkayysmiqjxuznezgwcdpr\nkhvflkasysmiqjxbunezgwcdpv\nohvflkatylmiqjxbpnozgwcdpr\nohvflkgtysziqjxbunezgwgdpr\nohvfljaiysmiqjxbuvezgwcdpr\nohvflkxtyslizjxbunezgwcdpr\nohzflkatysmiqjxbcnezgwcdar\nohvflkatysmiqjxbisecgwcdpr\nshvflkatyjmiqjkbunezgwcdpr\nmhvflkatysmiqjxvunezgwcdpk\nohfflkatysmiqjxbunczgwcppr\nohvflkatysmiqjkzunezgwcdpc\nohvflkatysmifjxbuneygwctpr\nohvflkatysmimjbbunezgwcdpe\nohvflkatjsciqjxbunezgwcdpa\nohvxlkatysmitjxbunezswcdpr\nohvslkatfsmiqjxbunezgwudpr\nohvflkatysmiqexbugezgwcdnr\nonvflkatysmiqjxkunezgtcdpr\nfhsflkalysmiqjxbunezgwcdpr\noyvflkatysmiqjobxnezgwcdpr\nohvflkatysmiqjxbunezswgdvr\nphvflkatyymiqjxvunezgwcdpr\noivflzutysmiqjxbunezgwcdpr\nohvflkftysmiqjxbunezkwcopr\nohvflkatysmwnjxbunezgwcdpp\nohvflkatysmiqkxcunezgwndpr\nphvklkatysmiqjhbunezgwcdpr\nohvflrawysmiqjxbunhzgwcdpr\nohvflkatysmiqjxbunecgwcdig\nohvflpakysmiqjxbunezgwrdpr\nodvflkatykmiqjxbunezglcdpr\nohtflkatysiiqjxblnezgwcdpr\nlhvfpkatysmiqjxbupezgwcdpr\nohvflkatdsmiqjpbunezgwcdps\nohvflkztysmiqjxvunezgwjdpr\nohvflbatysmxqoxbunezgwcdpr\nohvklkaigsmiqjxbunezgwcdpr\nohvfgkawysmiqjxbunezgwcdur\nohvflkatyskpqjlbunezgwcdpr\nohvflkatyqmiqjhbupezgwcdpr\nohqflkatysmiqjxzonezgwcdpr\nohxfnkatyymiqjxbunezgwcdpr\nohmflkatpsmiqjxbunezgwcdpw\nohvflkatysmiqjibnnewgwcdpr\nvevflkatysmiqjxbunezgwcypr\nohvflkatydmiqwxbungzgwcdpr\nohsrlkatysmiqjxbcnezgwcdpr\nohvflkptyvmiqexbunezgwcdpr\nopzflkatysmiqjxrunezgwcdpr\nohvflkitysmiqjxcunezgwcmpr\nohvflkatysmhhjxblnezgwcdpr\nohvflkatysfiqjxbunrzgwmdpr\nohvflkatyamibjxbunezgwcdpf\nohvflkalysmigjxbunezggcdpr\nohvflkatwsmisjxbunezgdcdpr\ndhvflkatysmlqjxbunszgwcdpr\nohvflkatysmiqjxbueeygwcbpr\nohvflkatgsmiqjnbunezhwcdpr\nsvvflkatysmiqjxbunezgwckpr\nopvflkatysmiqpxbufezgwcdpr\nohnvlkatysmiqjxbunezglcdpr\nphvflkutysjiqjxbunezgwcdpr\nohvflabtysmiqjjbunezgwcdpr\nouvflkatysmiqjsbunezgwcdpk\nosvflkatysmijjxbunezgwcypr\nowvflkatysmiqjxbukxzgwcdpr\nohvfliatvsmiljxbunezgwcdpr\nohvflkatysmiqjxbumezbwtdpr\nohvflkatyfcicjxbunezgwcdpr\nohvflkatysmiqldbunezgfcdpr\noqvflkatysmiqixkunezgwcdpr\nohvflkatysmiqjxbulezgicdpe\nohvflkatysmiqjxbuniegwcdpl\nohvflkatysmiqjwbunbzgwcdhr\nohvflkatysmiqjdbunezgwwdkr\nohqflkytysmiqjxbunezgwcdpc\nohvflkatysmigjxbunezqwwdpr\nohvfloatysmiqjpbumezgwcdpr\nohvklkathkmiqjxbunezgwcdpr\nohvflkstjsmiqjxbunezgwctpr\nohvvlkatysmiqjxbunewgwcdir\nohnflkatysmiqjxbunszgwcdlr\nohvflkatysmnqjxbunezgxcdlr\nohvfrkatysmiqjxbonezgwcdor\nihvflkatysmiqjxbuneogwcxpr\nohvflkatysmiqjxbunecgwcccr\nowvflkatysmivjxbunezgwjdpr\nohvflkgtysmiqjxbunczhwcdpr\nohyqlkatysmiqjxbunezgwcypr\nohvflkatysmiqjvbunezuwcdpw\nohvflkathsmiqmxbuoezgwcdpr\nehvjlkajysmiqjxbunezgwcdpr\nohvflkltysmiqjxblnezgwjdpr\noovflkvtfsmiqjxbunezgwcdpr\nolvfzkatysmiqjxyunezgwcdpr\nohvflkatysqitjxbunezgncdpr\nyhvflkatysmkqjxbunazgwcdpr\nzlvolkatysmiqjxbunezgwcdpr\nohvflpatysmiqjxbunezgwcapb\nohvflkatysmuqjxbunezgfcdur\n"


inputLines =
    String.lines inputText


hasNthings n line =
    String.split "" line
        |> Exts.Dict.frequency
        |> Dict.toList
        |> List.filter (\( thing, count ) -> count == n)
        |> (\list -> List.length list > 0)


inputsWithTwoRepeatsCount =
    inputLines |> List.map (hasNthings 2) |> List.filter identity |> List.length


inputsWithThreeRepeatsCount =
    inputLines |> List.map (hasNthings 3) |> List.filter identity |> List.length


part1Answer =
    inputsWithThreeRepeatsCount * inputsWithTwoRepeatsCount


part2Answer =
    findPart2Answer inputLines


findPart2Answer lines =
    case lines of
        nextLine :: restOfLines ->
            List.filterMap (findEditDistanceOne nextLine) restOfLines
                |> List.head
                |> doTheNextThing nextLine restOfLines

        [] ->
            "Don't know"


findEditDistanceOne baseString compString =
    if EditDistance.levenshteinOfStrings compString baseString == 1 then
        Just compString

    else
        Nothing


doTheNextThing currentLine lines maybeMatch =
    case maybeMatch of
        Nothing ->
            findPart2Answer lines

        Just match ->
            currentLine ++ "\n" ++ match
